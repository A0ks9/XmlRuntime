name: Android CI Build

# Trigger the workflow on pushes, pull requests, or manually.
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

# Use concurrency to ensure that if a new run is triggered while one is in progress, the previous one is canceled.
concurrency:
  group: android-build
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (JDK 17) needed for Android builds.
      - name: Set up Java (Temurin JDK 21)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Step 3: Cache Gradle dependencies to speed up subsequent builds.
      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Step 4: Set up Android SDK, Build Tools, and NDK using a community action.
      #         The 'latest' keyword ensures that the latest versions are used.
      - name: Set up Android SDK, Build Tools, and NDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: latest
          build-tools: latest
          ndk-version: latest

      # Step 5: Build the Android project.
      #         --parallel flag enables parallel processing for faster builds.
      - name: Build Android Project
        run: ./gradlew assembleDebug --parallel

      # Step 6: Upload the built APKs as artifacts.
      #         retention-days is set to 10 so that the artifacts are removed after 10 days.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: APK
          path: app/build/outputs/apk/
          retention-days: 10
